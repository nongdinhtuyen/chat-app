import { Injectable } from '@nestjs/common';
import { ChatDto } from './dto/chat.dto';
import { InjectModel } from '@nestjs/mongoose';
import { Chat, ChatDocument } from './schemas/chat.schema';
import { Model } from 'mongoose';
import { RequestListChatDto } from './dto/request-list-message.dto';

@Injectable()
export class ChatService {
  constructor(@InjectModel(Chat.name) private chatModel: Model<ChatDocument>) {}

  async createMessage(createMessageDto: ChatDto) {
    console.log(
      'üöÄ ~ ChatService ~ createMessage ~ createMessageDto:',
      createMessageDto,
    );
    try {
      const newMessage = await this.chatModel.create(createMessageDto);
      return newMessage;
    } catch (err) {
      console.log('üöÄ ~ ChatService ~ createMessage ~ err:', err);
      throw err;
    }
  }

  async findAll(qs: RequestListChatDto) {
    const { current = 1, limit = 20 } = qs;
    const skip = (current - 1) * limit;

    // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi
    const totalCount = await this.chatModel.countDocuments();

    // T√≠nh t·ªïng s·ªë trang
    const totalPages = Math.ceil(totalCount / limit);

    // L·∫•y c√°c b·∫£n ghi cho trang hi·ªán t·∫°i
    const chats = await this.chatModel
      .find()
      // .sort({ createdAt: -1 }) // S·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn c·ªßa createdAt
      .skip(skip) // B·ªè qua c√°c b·∫£n ghi ƒë√£ n·∫±m ·ªü c√°c trang tr∆∞·ªõc
      .limit(limit) // L·∫•y s·ªë l∆∞·ª£ng b·∫£n ghi theo limit
      .exec();

    // Tr·∫£ v·ªÅ d·ªØ li·ªáu
    return {
      meta: {
        current,
        pageSize: limit,
        pages: totalPages,
        total: totalCount,
      },
      result: chats, // D·ªØ li·ªáu c·ªßa trang hi·ªán t·∫°i
    };
  }

  findOne(id: number) {
    return `This action returns a #${id} chat`;
  }

  update(id: number, updateChatDto) {
    return `This action updates a #${id} chat`;
  }

  remove(id: number) {
    return `This action removes a #${id} chat`;
  }
}
